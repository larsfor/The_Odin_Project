# frozen_string_literal: true
# Pseudocode
# 1) Sort the left half of the array (assuming n > 1)
# 2) Sort the right half of the array (assuming n > 1)
# 3) Merge the two halves together

#                               left     right
# Imagine the following cells [5][2][1] [3][6][4]
# New left and right          [5]         [2][1]
# Sort them                   [5]         [1][2]
# Merge them                  [5][1][2]

# Lets sort the left part (part 1)
# Compare then the first element of the left part and the first element of the second part
# to figure out which one is smaller.
# We compare [5] and [1] so [1] becomes the new first element of this new three element array.
# Then we compare the [5] (left side) and the [2] (right side), where [2] is lower, so [2]
# becomes the next element of our merging step. Next step is to compare [5] against nothing, so
# [5] is merged.

# On to the right part [3][6][4] (part 2)
#                               left     right
# New left and right          [3]         [6][4]
# Sort them                   [3]         [4][6]
# Merge them                  [3][4][6]

# Sort the left half of the array -> [3] is a single array, and already sorted.
# Since the right half is two cell, sort it into two parts -> left [6] and right [4]
# When looking at the two cells, they're already sorted (single cells) so put them in a
# array to be compared. Which one is lower, [6] or [4]? Well [4] is lower, so it gets added to the
# array with [3]. After that [6] is compared to nothing and is placed last in the first array with
# [3] and [4].
# Then we compare the [3] (left side) and the [4] (right side), where [3] is lower, so [3]
# becomes the next element of our merging step. Since we know that everything else must be
# bigger / sorted correctly, everything is put into the array without checking the values.

# When then merge the arrays together (part 3)
# We have the following array [1][2][5] | [3][4][6] divided in the middle
# And we compare the first element of the left and the right side - which one is bigger
# [1] or [3]? -> [1] is so [1] is put in the final array. Then we continue with comparing
# [2] and [3], where [2] is lower and is put in the final array. Next we compare [5] and [3]
# so [3] goes to the final array. We compare [5] vs [4] and [4] is placed in the final array.
# Almost last [5] is compared to [6] and [5] is put in the final array. Lastly we can't compare
# any more numbers, so we put [6] intot he final array.


# frozen_string_literal: true

# rubocop:disable Metrics/AbcSize

unsorted_array = [5, 2, 1, 3, 6, 4]

def merge_sort(array)
  # Sort and return the array, based on which cell has the smallest amount
  # This is the base case
  if array.length < 3
    return array if array.length == 1
    return array[0], array[1] if array[0] < array[1]
    return array[1], array[0] if array[1] < array[0]
  end

  # 1 Divide: Split the array into two halves
  left_half = array[0..array.length / 2 - 1]
  right_half = array[array.length / 2..-1]

  # 2 Conquer: recursively sort the two smaller arrays and append them to a
  # a temporary sorted array
  left_half = merge_sort(left_half)
  right_half = merge_sort(right_half)
  # temp_sorted_array = left_half.flatten, right_half.flatten

  # 3 Combine: Merge the two sorted, smaller arrays into a single sorted array.
  # Here we have to sort again, which is separated from the sorting done previously
  sorted_array = []

  # Create a copy to not destroy the original arrays
  copy_left = left_half.dup
  copy_right = right_half.dup

  (0..left_half.length).each do |i|
    puts "copy left #{copy_left} copy right #{copy_right}"
    break if left_half[i].nil?
    (0..right_half.length).each do |j|
      # puts "#{copy_left[i]} #{copy_right[j]}"
      puts "#{left_half[i]} #{right_half[j]}"

      if right_half[j].nil?
        sorted_array << copy_left.shift 
        next
      end

      if right_half[j] < left_half[i]
        sorted_array << copy_right.shift 
        next
      end
    end
  end
  p sorted_array
end

merge_sort(unsorted_array)

# rubocop:enable Metrics/AbcSize
